// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	action "github.com/bioform/go-web-app-template/pkg/action"

	mock "github.com/stretchr/testify/mock"
)

// Action is an autogenerated mock type for the Action type
type Action struct {
	mock.Mock
}

type Action_Expecter struct {
	mock *mock.Mock
}

func (_m *Action) EXPECT() *Action_Expecter {
	return &Action_Expecter{mock: &_m.Mock}
}

// IsAllowed provides a mock function with given fields: _a0
func (_m *Action) IsAllowed(_a0 context.Context) (bool, action.ErrorMap) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsAllowed")
	}

	var r0 bool
	var r1 action.ErrorMap
	if rf, ok := ret.Get(0).(func(context.Context) (bool, action.ErrorMap)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) action.ErrorMap); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(action.ErrorMap)
		}
	}

	return r0, r1
}

// Action_IsAllowed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAllowed'
type Action_IsAllowed_Call struct {
	*mock.Call
}

// IsAllowed is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Action_Expecter) IsAllowed(_a0 interface{}) *Action_IsAllowed_Call {
	return &Action_IsAllowed_Call{Call: _e.mock.On("IsAllowed", _a0)}
}

func (_c *Action_IsAllowed_Call) Run(run func(_a0 context.Context)) *Action_IsAllowed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Action_IsAllowed_Call) Return(ok bool, errorMap action.ErrorMap) *Action_IsAllowed_Call {
	_c.Call.Return(ok, errorMap)
	return _c
}

func (_c *Action_IsAllowed_Call) RunAndReturn(run func(context.Context) (bool, action.ErrorMap)) *Action_IsAllowed_Call {
	_c.Call.Return(run)
	return _c
}

// IsEnabled provides a mock function with given fields: _a0
func (_m *Action) IsEnabled(_a0 context.Context) (bool, action.ErrorMap) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	var r1 action.ErrorMap
	if rf, ok := ret.Get(0).(func(context.Context) (bool, action.ErrorMap)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) action.ErrorMap); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(action.ErrorMap)
		}
	}

	return r0, r1
}

// Action_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type Action_IsEnabled_Call struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Action_Expecter) IsEnabled(_a0 interface{}) *Action_IsEnabled_Call {
	return &Action_IsEnabled_Call{Call: _e.mock.On("IsEnabled", _a0)}
}

func (_c *Action_IsEnabled_Call) Run(run func(_a0 context.Context)) *Action_IsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Action_IsEnabled_Call) Return(ok bool, errorMap action.ErrorMap) *Action_IsEnabled_Call {
	_c.Call.Return(ok, errorMap)
	return _c
}

func (_c *Action_IsEnabled_Call) RunAndReturn(run func(context.Context) (bool, action.ErrorMap)) *Action_IsEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// IsValid provides a mock function with given fields: _a0
func (_m *Action) IsValid(_a0 context.Context) (bool, action.ErrorMap) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsValid")
	}

	var r0 bool
	var r1 action.ErrorMap
	if rf, ok := ret.Get(0).(func(context.Context) (bool, action.ErrorMap)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) action.ErrorMap); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(action.ErrorMap)
		}
	}

	return r0, r1
}

// Action_IsValid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValid'
type Action_IsValid_Call struct {
	*mock.Call
}

// IsValid is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Action_Expecter) IsValid(_a0 interface{}) *Action_IsValid_Call {
	return &Action_IsValid_Call{Call: _e.mock.On("IsValid", _a0)}
}

func (_c *Action_IsValid_Call) Run(run func(_a0 context.Context)) *Action_IsValid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Action_IsValid_Call) Return(ok bool, errorMap action.ErrorMap) *Action_IsValid_Call {
	_c.Call.Return(ok, errorMap)
	return _c
}

func (_c *Action_IsValid_Call) RunAndReturn(run func(context.Context) (bool, action.ErrorMap)) *Action_IsValid_Call {
	_c.Call.Return(run)
	return _c
}

// Perform provides a mock function with given fields: _a0
func (_m *Action) Perform(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Perform")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Action_Perform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Perform'
type Action_Perform_Call struct {
	*mock.Call
}

// Perform is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Action_Expecter) Perform(_a0 interface{}) *Action_Perform_Call {
	return &Action_Perform_Call{Call: _e.mock.On("Perform", _a0)}
}

func (_c *Action_Perform_Call) Run(run func(_a0 context.Context)) *Action_Perform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Action_Perform_Call) Return(_a0 error) *Action_Perform_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_Perform_Call) RunAndReturn(run func(context.Context) error) *Action_Perform_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransactionProvider provides a mock function with given fields: _a0
func (_m *Action) SetTransactionProvider(_a0 action.TransactionProvider) {
	_m.Called(_a0)
}

// Action_SetTransactionProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransactionProvider'
type Action_SetTransactionProvider_Call struct {
	*mock.Call
}

// SetTransactionProvider is a helper method to define mock.On call
//   - _a0 action.TransactionProvider
func (_e *Action_Expecter) SetTransactionProvider(_a0 interface{}) *Action_SetTransactionProvider_Call {
	return &Action_SetTransactionProvider_Call{Call: _e.mock.On("SetTransactionProvider", _a0)}
}

func (_c *Action_SetTransactionProvider_Call) Run(run func(_a0 action.TransactionProvider)) *Action_SetTransactionProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(action.TransactionProvider))
	})
	return _c
}

func (_c *Action_SetTransactionProvider_Call) Return() *Action_SetTransactionProvider_Call {
	_c.Call.Return()
	return _c
}

func (_c *Action_SetTransactionProvider_Call) RunAndReturn(run func(action.TransactionProvider)) *Action_SetTransactionProvider_Call {
	_c.Call.Return(run)
	return _c
}

// TransactionProvider provides a mock function with given fields:
func (_m *Action) TransactionProvider() action.TransactionProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransactionProvider")
	}

	var r0 action.TransactionProvider
	if rf, ok := ret.Get(0).(func() action.TransactionProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(action.TransactionProvider)
		}
	}

	return r0
}

// Action_TransactionProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionProvider'
type Action_TransactionProvider_Call struct {
	*mock.Call
}

// TransactionProvider is a helper method to define mock.On call
func (_e *Action_Expecter) TransactionProvider() *Action_TransactionProvider_Call {
	return &Action_TransactionProvider_Call{Call: _e.mock.On("TransactionProvider")}
}

func (_c *Action_TransactionProvider_Call) Run(run func()) *Action_TransactionProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_TransactionProvider_Call) Return(_a0 action.TransactionProvider) *Action_TransactionProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_TransactionProvider_Call) RunAndReturn(run func() action.TransactionProvider) *Action_TransactionProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewAction creates a new instance of Action. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *Action {
	mock := &Action{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
