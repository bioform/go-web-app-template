// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	action "github.com/bioform/go-web-app-template/pkg/action"

	mock "github.com/stretchr/testify/mock"
)

// Action is an autogenerated mock type for the Action type
type Action struct {
	mock.Mock
}

type Action_Expecter struct {
	mock *mock.Mock
}

func (_m *Action) EXPECT() *Action_Expecter {
	return &Action_Expecter{mock: &_m.Mock}
}

// AfterCommitCallback provides a mock function with no fields
func (_m *Action) AfterCommitCallback() action.AfterCommitCallback {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AfterCommitCallback")
	}

	var r0 action.AfterCommitCallback
	if rf, ok := ret.Get(0).(func() action.AfterCommitCallback); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(action.AfterCommitCallback)
		}
	}

	return r0
}

// Action_AfterCommitCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AfterCommitCallback'
type Action_AfterCommitCallback_Call struct {
	*mock.Call
}

// AfterCommitCallback is a helper method to define mock.On call
func (_e *Action_Expecter) AfterCommitCallback() *Action_AfterCommitCallback_Call {
	return &Action_AfterCommitCallback_Call{Call: _e.mock.On("AfterCommitCallback")}
}

func (_c *Action_AfterCommitCallback_Call) Run(run func()) *Action_AfterCommitCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_AfterCommitCallback_Call) Return(_a0 action.AfterCommitCallback) *Action_AfterCommitCallback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_AfterCommitCallback_Call) RunAndReturn(run func() action.AfterCommitCallback) *Action_AfterCommitCallback_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function with no fields
func (_m *Action) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Action_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type Action_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *Action_Expecter) Context() *Action_Context_Call {
	return &Action_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *Action_Context_Call) Run(run func()) *Action_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_Context_Call) Return(_a0 context.Context) *Action_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_Context_Call) RunAndReturn(run func() context.Context) *Action_Context_Call {
	_c.Call.Return(run)
	return _c
}

// ErrorHandler provides a mock function with given fields: _a0
func (_m *Action) ErrorHandler(_a0 error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ErrorHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Action_ErrorHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorHandler'
type Action_ErrorHandler_Call struct {
	*mock.Call
}

// ErrorHandler is a helper method to define mock.On call
//   - _a0 error
func (_e *Action_Expecter) ErrorHandler(_a0 interface{}) *Action_ErrorHandler_Call {
	return &Action_ErrorHandler_Call{Call: _e.mock.On("ErrorHandler", _a0)}
}

func (_c *Action_ErrorHandler_Call) Run(run func(_a0 error)) *Action_ErrorHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Action_ErrorHandler_Call) Return(_a0 error) *Action_ErrorHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_ErrorHandler_Call) RunAndReturn(run func(error) error) *Action_ErrorHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with no fields
func (_m *Action) Init() {
	_m.Called()
}

// Action_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type Action_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *Action_Expecter) Init() *Action_Init_Call {
	return &Action_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *Action_Init_Call) Run(run func()) *Action_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_Init_Call) Return() *Action_Init_Call {
	_c.Call.Return()
	return _c
}

func (_c *Action_Init_Call) RunAndReturn(run func()) *Action_Init_Call {
	_c.Run(run)
	return _c
}

// IsAllowed provides a mock function with no fields
func (_m *Action) IsAllowed() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsAllowed")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Action_IsAllowed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAllowed'
type Action_IsAllowed_Call struct {
	*mock.Call
}

// IsAllowed is a helper method to define mock.On call
func (_e *Action_Expecter) IsAllowed() *Action_IsAllowed_Call {
	return &Action_IsAllowed_Call{Call: _e.mock.On("IsAllowed")}
}

func (_c *Action_IsAllowed_Call) Run(run func()) *Action_IsAllowed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_IsAllowed_Call) Return(_a0 bool, _a1 error) *Action_IsAllowed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Action_IsAllowed_Call) RunAndReturn(run func() (bool, error)) *Action_IsAllowed_Call {
	_c.Call.Return(run)
	return _c
}

// IsEnabled provides a mock function with no fields
func (_m *Action) IsEnabled() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Action_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type Action_IsEnabled_Call struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
func (_e *Action_Expecter) IsEnabled() *Action_IsEnabled_Call {
	return &Action_IsEnabled_Call{Call: _e.mock.On("IsEnabled")}
}

func (_c *Action_IsEnabled_Call) Run(run func()) *Action_IsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_IsEnabled_Call) Return(_a0 bool, _a1 error) *Action_IsEnabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Action_IsEnabled_Call) RunAndReturn(run func() (bool, error)) *Action_IsEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// IsValid provides a mock function with no fields
func (_m *Action) IsValid() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsValid")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Action_IsValid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValid'
type Action_IsValid_Call struct {
	*mock.Call
}

// IsValid is a helper method to define mock.On call
func (_e *Action_Expecter) IsValid() *Action_IsValid_Call {
	return &Action_IsValid_Call{Call: _e.mock.On("IsValid")}
}

func (_c *Action_IsValid_Call) Run(run func()) *Action_IsValid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_IsValid_Call) Return(_a0 bool, _a1 error) *Action_IsValid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Action_IsValid_Call) RunAndReturn(run func() (bool, error)) *Action_IsValid_Call {
	_c.Call.Return(run)
	return _c
}

// Perform provides a mock function with no fields
func (_m *Action) Perform() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Perform")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Action_Perform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Perform'
type Action_Perform_Call struct {
	*mock.Call
}

// Perform is a helper method to define mock.On call
func (_e *Action_Expecter) Perform() *Action_Perform_Call {
	return &Action_Perform_Call{Call: _e.mock.On("Perform")}
}

func (_c *Action_Perform_Call) Run(run func()) *Action_Perform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_Perform_Call) Return(_a0 error) *Action_Perform_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_Perform_Call) RunAndReturn(run func() error) *Action_Perform_Call {
	_c.Call.Return(run)
	return _c
}

// Performer provides a mock function with no fields
func (_m *Action) Performer() action.Performer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Performer")
	}

	var r0 action.Performer
	if rf, ok := ret.Get(0).(func() action.Performer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(action.Performer)
		}
	}

	return r0
}

// Action_Performer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Performer'
type Action_Performer_Call struct {
	*mock.Call
}

// Performer is a helper method to define mock.On call
func (_e *Action_Expecter) Performer() *Action_Performer_Call {
	return &Action_Performer_Call{Call: _e.mock.On("Performer")}
}

func (_c *Action_Performer_Call) Run(run func()) *Action_Performer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_Performer_Call) Return(_a0 action.Performer) *Action_Performer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_Performer_Call) RunAndReturn(run func() action.Performer) *Action_Performer_Call {
	_c.Call.Return(run)
	return _c
}

// SetContext provides a mock function with given fields: _a0
func (_m *Action) SetContext(_a0 context.Context) {
	_m.Called(_a0)
}

// Action_SetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetContext'
type Action_SetContext_Call struct {
	*mock.Call
}

// SetContext is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Action_Expecter) SetContext(_a0 interface{}) *Action_SetContext_Call {
	return &Action_SetContext_Call{Call: _e.mock.On("SetContext", _a0)}
}

func (_c *Action_SetContext_Call) Run(run func(_a0 context.Context)) *Action_SetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Action_SetContext_Call) Return() *Action_SetContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *Action_SetContext_Call) RunAndReturn(run func(context.Context)) *Action_SetContext_Call {
	_c.Run(run)
	return _c
}

// SetPerformer provides a mock function with given fields: _a0
func (_m *Action) SetPerformer(_a0 action.Performer) {
	_m.Called(_a0)
}

// Action_SetPerformer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPerformer'
type Action_SetPerformer_Call struct {
	*mock.Call
}

// SetPerformer is a helper method to define mock.On call
//   - _a0 action.Performer
func (_e *Action_Expecter) SetPerformer(_a0 interface{}) *Action_SetPerformer_Call {
	return &Action_SetPerformer_Call{Call: _e.mock.On("SetPerformer", _a0)}
}

func (_c *Action_SetPerformer_Call) Run(run func(_a0 action.Performer)) *Action_SetPerformer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(action.Performer))
	})
	return _c
}

func (_c *Action_SetPerformer_Call) Return() *Action_SetPerformer_Call {
	_c.Call.Return()
	return _c
}

func (_c *Action_SetPerformer_Call) RunAndReturn(run func(action.Performer)) *Action_SetPerformer_Call {
	_c.Run(run)
	return _c
}

// TransactionProvider provides a mock function with no fields
func (_m *Action) TransactionProvider() action.TransactionProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransactionProvider")
	}

	var r0 action.TransactionProvider
	if rf, ok := ret.Get(0).(func() action.TransactionProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(action.TransactionProvider)
		}
	}

	return r0
}

// Action_TransactionProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionProvider'
type Action_TransactionProvider_Call struct {
	*mock.Call
}

// TransactionProvider is a helper method to define mock.On call
func (_e *Action_Expecter) TransactionProvider() *Action_TransactionProvider_Call {
	return &Action_TransactionProvider_Call{Call: _e.mock.On("TransactionProvider")}
}

func (_c *Action_TransactionProvider_Call) Run(run func()) *Action_TransactionProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_TransactionProvider_Call) Return(_a0 action.TransactionProvider) *Action_TransactionProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_TransactionProvider_Call) RunAndReturn(run func() action.TransactionProvider) *Action_TransactionProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewAction creates a new instance of Action. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *Action {
	mock := &Action{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
