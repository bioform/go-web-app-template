// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	action "github.com/bioform/go-web-app-template/pkg/action"
	mock "github.com/stretchr/testify/mock"
)

// AddCallbackFunc is an autogenerated mock type for the AddCallbackFunc type
type AddCallbackFunc struct {
	mock.Mock
}

type AddCallbackFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *AddCallbackFunc) EXPECT() *AddCallbackFunc_Expecter {
	return &AddCallbackFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: callback
func (_m *AddCallbackFunc) Execute(callback action.AfterCommitCallback) {
	_m.Called(callback)
}

// AddCallbackFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type AddCallbackFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - callback action.AfterCommitCallback
func (_e *AddCallbackFunc_Expecter) Execute(callback interface{}) *AddCallbackFunc_Execute_Call {
	return &AddCallbackFunc_Execute_Call{Call: _e.mock.On("Execute", callback)}
}

func (_c *AddCallbackFunc_Execute_Call) Run(run func(callback action.AfterCommitCallback)) *AddCallbackFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(action.AfterCommitCallback))
	})
	return _c
}

func (_c *AddCallbackFunc_Execute_Call) Return() *AddCallbackFunc_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *AddCallbackFunc_Execute_Call) RunAndReturn(run func(action.AfterCommitCallback)) *AddCallbackFunc_Execute_Call {
	_c.Run(run)
	return _c
}

// NewAddCallbackFunc creates a new instance of AddCallbackFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAddCallbackFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *AddCallbackFunc {
	mock := &AddCallbackFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
