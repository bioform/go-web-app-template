// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TransactionProvider is an autogenerated mock type for the TransactionProvider type
type TransactionProvider struct {
	mock.Mock
}

type TransactionProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionProvider) EXPECT() *TransactionProvider_Expecter {
	return &TransactionProvider_Expecter{mock: &_m.Mock}
}

// Transaction provides a mock function with given fields: currentContext, executeInTransaction
func (_m *TransactionProvider) Transaction(currentContext context.Context, executeInTransaction func(context.Context) error) error {
	ret := _m.Called(currentContext, executeInTransaction)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(currentContext, executeInTransaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionProvider_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type TransactionProvider_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - currentContext context.Context
//   - executeInTransaction func(context.Context) error
func (_e *TransactionProvider_Expecter) Transaction(currentContext interface{}, executeInTransaction interface{}) *TransactionProvider_Transaction_Call {
	return &TransactionProvider_Transaction_Call{Call: _e.mock.On("Transaction", currentContext, executeInTransaction)}
}

func (_c *TransactionProvider_Transaction_Call) Run(run func(currentContext context.Context, executeInTransaction func(context.Context) error)) *TransactionProvider_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *TransactionProvider_Transaction_Call) Return(_a0 error) *TransactionProvider_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionProvider_Transaction_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *TransactionProvider_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionProvider creates a new instance of TransactionProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionProvider {
	mock := &TransactionProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
