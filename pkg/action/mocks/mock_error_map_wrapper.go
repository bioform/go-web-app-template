// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	action "github.com/bioform/go-web-app-template/pkg/action"
	mock "github.com/stretchr/testify/mock"
)

// ErrorMapWrapper is an autogenerated mock type for the ErrorMapWrapper type
type ErrorMapWrapper struct {
	mock.Mock
}

type ErrorMapWrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *ErrorMapWrapper) EXPECT() *ErrorMapWrapper_Expecter {
	return &ErrorMapWrapper_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: key, value
func (_m *ErrorMapWrapper) Add(key string, value string) {
	_m.Called(key, value)
}

// ErrorMapWrapper_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type ErrorMapWrapper_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *ErrorMapWrapper_Expecter) Add(key interface{}, value interface{}) *ErrorMapWrapper_Add_Call {
	return &ErrorMapWrapper_Add_Call{Call: _e.mock.On("Add", key, value)}
}

func (_c *ErrorMapWrapper_Add_Call) Run(run func(key string, value string)) *ErrorMapWrapper_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ErrorMapWrapper_Add_Call) Return() *ErrorMapWrapper_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *ErrorMapWrapper_Add_Call) RunAndReturn(run func(string, string)) *ErrorMapWrapper_Add_Call {
	_c.Run(run)
	return _c
}

// Cause provides a mock function with no fields
func (_m *ErrorMapWrapper) Cause() action.ErrorMap {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cause")
	}

	var r0 action.ErrorMap
	if rf, ok := ret.Get(0).(func() action.ErrorMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(action.ErrorMap)
		}
	}

	return r0
}

// ErrorMapWrapper_Cause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cause'
type ErrorMapWrapper_Cause_Call struct {
	*mock.Call
}

// Cause is a helper method to define mock.On call
func (_e *ErrorMapWrapper_Expecter) Cause() *ErrorMapWrapper_Cause_Call {
	return &ErrorMapWrapper_Cause_Call{Call: _e.mock.On("Cause")}
}

func (_c *ErrorMapWrapper_Cause_Call) Run(run func()) *ErrorMapWrapper_Cause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ErrorMapWrapper_Cause_Call) Return(_a0 action.ErrorMap) *ErrorMapWrapper_Cause_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ErrorMapWrapper_Cause_Call) RunAndReturn(run func() action.ErrorMap) *ErrorMapWrapper_Cause_Call {
	_c.Call.Return(run)
	return _c
}

// NewErrorMapWrapper creates a new instance of ErrorMapWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewErrorMapWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ErrorMapWrapper {
	mock := &ErrorMapWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
